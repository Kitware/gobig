---

  - name: mesos | service | logic flags | compute
    set_fact:
        remove_data_root: "{{ state == 'absent' }}"
        remove_install_root: "{{ state == 'absent' }}"
        stop_services: "{{ state == 'absent' }}"
        do_install: >
            {{ state == "present" or state == "stopped" or
               state == "started" or state == "restarted" or
               state == "reloaded" }}
        notify_services: >
            {{ state == "stopped" or state == "started"
            or state == "restarted" or state == "reloaded" }}

  - name: mesos | install root | default | set
    set_fact:
        mesos_install_root: /opt/mesos/{{ mesos_version }}
    when: mesos_install_root == ""

  - name: mesos | install root | parent | probe
    shell: dirname "{{ mesos_install_root }}"
    register: parent_probe

  - name: mesos | install root | parent | record
    set_fact:
        mesos_install_parent: "{{ parent_probe.stdout }}"

  - name: mesos | data root | default | set
    set_fact:
        mesos_data_root: /data/mesos/{{ mesos_version }}
    when: mesos_data_root == ""

  - name: mesos | install root | probe
    stat:
        path: "{{ mesos_install_root }}"
    register: install_root_probe

  - name: mesos | install root | flag | record
    set_fact:
        create_install_root: >
            {{ (do_install|bool) and
                (not (install_root_probe.stat.exists|bool)) }}

  - name: mesos | quorum | url | compute
    set_fact:
        mesos_zookeeper_url: >
            {{ groups[zookeeper_ansible_group] |
                zk_url(hostvars, zookeeper_net_interface, zookeeper_client_port)
                }}/{{ mesos_cluster_name }}

  - name: mesos | quorum | count | compute
    set_fact:
        mesos_quorum: >
            {{ (groups[zookeeper_ansible_group]|length)//2 + 1 }}
    when: mesos_quorum == 0

  - name: mesos | build | probe
    stat:
        path: "{{ mesos_install_root }}/build"
    when: do_install|bool
    register: build_probe

  - name: mesos | build | flag | compute
    set_fact:
        do_compile: >
            {{ (do_install|bool) and
                (not (build_probe.stat.exists|bool) or (recompile|bool)) }}

